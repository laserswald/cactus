!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/5a4b6d04/
CACT_LIST_FOR_EACH_ITEM	include/cactus/pair.h	/^#define CACT_LIST_FOR_EACH_ITEM(/;"	d	signature:(cact,item,list)
CACT_LIST_FOR_EACH_PAIR	include/cactus/pair.h	/^#define CACT_LIST_FOR_EACH_PAIR(/;"	d	signature:(cact,pair,list)
CACT_PAIR_H	include/cactus/pair.h	/^#define CACT_PAIR_H$/;"	d
CONFIG_H	config.h	/^#define CONFIG_H$/;"	d
DEFINE_COMPARISON_BUILTIN	lib/builtin.c	/^#define DEFINE_COMPARISON_BUILTIN(/;"	d	file:	signature:(name,fn)
DEFINE_TYPE_PREDICATE_BUILTIN	lib/builtin.c	/^#define DEFINE_TYPE_PREDICATE_BUILTIN(/;"	d	file:	signature:(name,fn)
DEFINE_TYPE_PREDICATE_BUILTIN	lib/builtin.c	/^DEFINE_TYPE_PREDICATE_BUILTIN(cact_builtin_is_nil, cact_is_null)$/;"	f	signature:(cact_builtin_is_nil,cact_is_null)
PROMPT	main.c	/^#define PROMPT /;"	d	file:
TABLE_GENERATE	lib/env.c	/^TABLE_GENERATE(cact_env_entries, struct cact_symbol *, struct cact_val)$/;"	f	signature:(cact_env_entries,struct cact_symbol *,struct cact_val)
builtins	config.h	/^struct cact_builtin builtins[] = {$/;"	v	typeref:struct:cact_builtin[]
cact_builtin_car	lib/builtin.c	/^cact_builtin_car(struct cactus *cact, struct cact_val args) $/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
cact_builtin_cdr	lib/builtin.c	/^cact_builtin_cdr(struct cactus *cact, struct cact_val args) $/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
cact_builtin_cons	lib/builtin.c	/^cact_builtin_cons(struct cactus *cact, struct cact_val args) $/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
cact_builtin_divide	lib/builtin.c	/^cact_builtin_divide(struct cactus *cact, struct cact_val x)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val x)
cact_builtin_exit	lib/builtin.c	/^cact_builtin_exit(struct cactus *cact, struct cact_val x)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val x)
cact_builtin_load	lib/builtin.c	/^cact_builtin_load(struct cactus *cact, struct cact_val x)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val x)
cact_builtin_minus	lib/builtin.c	/^cact_builtin_minus(struct cactus *cact, struct cact_val x)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val x)
cact_builtin_newline	lib/builtin.c	/^cact_builtin_newline(struct cactus *cact, struct cact_val args) $/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
cact_builtin_not	lib/builtin.c	/^cact_builtin_not(struct cactus *cact, struct cact_val x)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val x)
cact_builtin_plus	lib/builtin.c	/^cact_builtin_plus(struct cactus *cact, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
cact_builtin_times	lib/builtin.c	/^cact_builtin_times(struct cactus *cact, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
cact_caddr	include/cactus/pair.h	/^#define cact_caddr(/;"	d	signature:(cact,x)
cact_cadr	include/cactus/pair.h	/^#define cact_cadr(/;"	d	signature:(cact,x)
cact_env_define	lib/env.c	/^cact_env_define(struct cactus *cact, struct cact_env *e, $/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_env * e,struct cact_symbol * key,struct cact_val val)
cact_env_init	lib/env.c	/^cact_env_init(struct cact_env *e, struct cact_env *parent)$/;"	f	typeref:typename:void	signature:(struct cact_env * e,struct cact_env * parent)
cact_env_lookup	lib/env.c	/^cact_env_lookup(struct cactus *cact, struct cact_env *e, struct cact_symbol *key)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_env * e,struct cact_symbol * key)
cact_env_set	lib/env.c	/^cact_env_set(struct cactus *cact, struct cact_env *e, $/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_env * e,struct cact_symbol * key,struct cact_val val)
cact_eval	lib/eval.c	/^cact_eval(struct cactus *cact, struct cact_val x)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val x)
cact_eval_file	lib/eval.c	/^cact_eval_file(struct cactus *cact, FILE *in)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,FILE * in)
cact_eval_list	lib/eval.c	/^cact_eval_list(struct cactus *cact, struct cact_val lst)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val lst)
cact_eval_string	lib/eval.c	/^cact_eval_string(struct cactus *cact, char *s)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,char * s)
cact_make_native_proc	lib/proc.c	/^cact_make_native_proc(struct cactus *cact, cact_native_func fn)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,cact_native_func fn)
cact_make_procedure	lib/proc.c	/^cact_make_procedure(struct cactus *cact, struct cact_env *e, struct cact_val argl, struct cact_v/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_env * e,struct cact_val argl,struct cact_val body)
cact_pair	include/cactus/pair.h	/^struct cact_pair {$/;"	s
cact_proc_apply	lib/proc.c	/^cact_proc_apply(struct cactus *cact, struct cact_proc *clo, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_proc * clo,struct cact_val args)
cact_unpack_args	lib/builtin.c	/^cact_unpack_args(struct cactus *cact, struct cact_val arglist, const char *format, ...)$/;"	f	typeref:typename:int	signature:(struct cactus * cact,struct cact_val arglist,const char * format,...)
car	include/cactus/pair.h	/^	struct cact_val car;$/;"	m	struct:cact_pair	typeref:struct:cact_val
cdr	include/cactus/pair.h	/^	struct cact_val cdr;$/;"	m	struct:cact_pair	typeref:struct:cact_val
is_application	lib/eval.c	/^is_application(struct cactus *cact, struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cactus * cact,struct cact_val x)
is_assignment	lib/eval.c	/^is_assignment(struct cactus *cact, struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cactus * cact,struct cact_val x)
is_conditional	lib/eval.c	/^is_conditional(struct cactus *cact, struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cactus * cact,struct cact_val x)
is_definition	lib/eval.c	/^is_definition(struct cactus *cact, struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cactus * cact,struct cact_val x)
is_lambda	lib/eval.c	/^is_lambda(struct cactus *cact, struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cactus * cact,struct cact_val x)
is_quotation	lib/eval.c	/^is_quotation(struct cactus *cact, struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cactus * cact,struct cact_val x)
is_self_evaluating	lib/eval.c	/^is_self_evaluating(struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cact_val x)
is_sequence	lib/eval.c	/^is_sequence(struct cactus *cact, struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cactus * cact,struct cact_val x)
is_tagged_pair	lib/eval.c	/^is_tagged_pair(struct cactus *cact, const char* tag, struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cactus * cact,const char * tag,struct cact_val x)
is_variable	lib/eval.c	/^is_variable(struct cact_val x)$/;"	f	typeref:typename:bool	file:	signature:(struct cact_val x)
main	main.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int	signature:(int argc,char * argv[])
obj	include/cactus/pair.h	/^	struct cact_obj obj;$/;"	m	struct:cact_pair	typeref:struct:cact_obj
print_env	lib/env.c	/^print_env(struct cact_env *e)$/;"	f	typeref:typename:void	signature:(struct cact_env * e)
repl	main.c	/^repl(struct cactus *cact, FILE *f)$/;"	f	typeref:typename:int	signature:(struct cactus * cact,FILE * f)
special_begin	lib/eval.c	/^special_begin(struct cactus *cact, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
special_define	lib/eval.c	/^special_define(struct cactus *cact, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
special_if	lib/eval.c	/^special_if(struct cactus *cact, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
special_lambda	lib/eval.c	/^special_lambda(struct cactus *cact, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
special_quote	lib/eval.c	/^special_quote(struct cactus *cact, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
special_set_bang	lib/eval.c	/^special_set_bang(struct cactus *cact, struct cact_val args)$/;"	f	typeref:struct:cact_val	signature:(struct cactus * cact,struct cact_val args)
unpack_typecheck	lib/builtin.c	/^unpack_typecheck(const struct cact_val arg, const char c)$/;"	f	typeref:typename:bool	signature:(const struct cact_val arg,const char c)
verbosity	main.c	/^int verbosity = 0;$/;"	v	typeref:typename:int
